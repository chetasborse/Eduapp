[{"/home/chetas/projects/se_project/eduapp/src/index.js":"1","/home/chetas/projects/se_project/eduapp/src/reportWebVitals.js":"2","/home/chetas/projects/se_project/eduapp/src/App.js":"3","/home/chetas/projects/se_project/eduapp/src/components/Navigation/Navigation.js":"4","/home/chetas/projects/se_project/eduapp/src/components/HomePage/Home.js":"5","/home/chetas/projects/se_project/eduapp/src/components/Users/Login.js":"6","/home/chetas/projects/se_project/eduapp/src/components/Users/Logout.js":"7","/home/chetas/projects/se_project/eduapp/src/components/Users/Profile.js":"8","/home/chetas/projects/se_project/eduapp/src/components/Users/Register.js":"9","/home/chetas/projects/se_project/eduapp/src/redux/Users/userActions.js":"10","/home/chetas/projects/se_project/eduapp/src/redux/Users/userTypes.js":"11","/home/chetas/projects/se_project/eduapp/src/redux/store.js":"12","/home/chetas/projects/se_project/eduapp/src/redux/Users/userReducer.js":"13","/home/chetas/projects/se_project/eduapp/src/components/Sessions/Request_view.js":"14","/home/chetas/projects/se_project/eduapp/src/components/Sessions/ReqSession.js":"15","/home/chetas/projects/se_project/eduapp/src/redux/Session/sessionReducer.js":"16","/home/chetas/projects/se_project/eduapp/src/redux/Session/sessionTypes.js":"17","/home/chetas/projects/se_project/eduapp/src/redux/Session/sessionAction.js":"18","/home/chetas/projects/se_project/eduapp/src/components/Sessions/SessionCompleted.js":"19","/home/chetas/projects/se_project/eduapp/src/components/HomePage/Recommendations.js":"20","/home/chetas/projects/se_project/eduapp/src/components/Sessions/ReqIndiSession.js":"21"},{"size":673,"mtime":1612365787657,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1612017628334,"results":"24","hashOfConfig":"23"},{"size":1408,"mtime":1613286597299,"results":"25","hashOfConfig":"23"},{"size":4928,"mtime":1614793704215,"results":"26","hashOfConfig":"23"},{"size":10446,"mtime":1613302597517,"results":"27","hashOfConfig":"23"},{"size":2534,"mtime":1613294154644,"results":"28","hashOfConfig":"23"},{"size":888,"mtime":1612369906889,"results":"29","hashOfConfig":"23"},{"size":18489,"mtime":1614793554671,"results":"30","hashOfConfig":"23"},{"size":9087,"mtime":1614793265567,"results":"31","hashOfConfig":"23"},{"size":7747,"mtime":1613288544615,"results":"32","hashOfConfig":"23"},{"size":555,"mtime":1613286648161,"results":"33","hashOfConfig":"23"},{"size":461,"mtime":1613203263558,"results":"34","hashOfConfig":"23"},{"size":3208,"mtime":1613293744398,"results":"35","hashOfConfig":"23"},{"size":4723,"mtime":1613301038080,"results":"36","hashOfConfig":"23"},{"size":6035,"mtime":1613276407760,"results":"37","hashOfConfig":"23"},{"size":901,"mtime":1613203245898,"results":"38","hashOfConfig":"23"},{"size":229,"mtime":1613203056943,"results":"39","hashOfConfig":"23"},{"size":2993,"mtime":1613283671770,"results":"40","hashOfConfig":"23"},{"size":3366,"mtime":1613296556708,"results":"41","hashOfConfig":"23"},{"size":3159,"mtime":1613297544013,"results":"42","hashOfConfig":"23"},{"size":6819,"mtime":1613298555926,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"vzf3x9",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"46"},"/home/chetas/projects/se_project/eduapp/src/index.js",[],["93","94"],"/home/chetas/projects/se_project/eduapp/src/reportWebVitals.js",[],"/home/chetas/projects/se_project/eduapp/src/App.js",["95","96","97","98","99","100","101","102","103","104"],"import React from 'react'\n//import {Provider} from 'react-redux'\nimport './App.css';\nimport axios from 'axios'\nimport { useEffect, useState } from 'react';\nimport Navigation from './components/Navigation/Navigation';\nimport {connect} from 'react-redux'\nimport { checkUser, getInterest, set_all_lang_and_subs } from './redux/Users/userActions';\n//import store from './redux/store';\n\nfunction App(props) {\n\n  axios.defaults.withCredentials = true;\n\n  const [LoggedIn, setLogin] = useState(false);\n  const [Username, setUser] = useState(\"\");\n  const [Password, setPassword] = useState(\"\");\n  const [all_langs, set_langs] = useState([]);\n  const [all_subs, set_subs] = useState([]);\n\n\n  useEffect(() => {\n    props.checkUser()\n    setLogin(props.loggedIn)\n    setUser(props.username)\n    setPassword(props.password)\n    \n  }, [props.loggedIn])\n\n  return (\n      <div className=\"App\">\n        <Navigation/>\n      </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    loggedIn: state.users.loggedIn,\n    username: state.users.username,\n    password: state.users.password,\n    user_id: state.users.user_id,\n    is_teacher: state.users.is_teacher,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    checkUser: () => dispatch(checkUser()),\n    // set_all_langs_and_subs: (value) => dispatch(set_all_lang_and_subs(value))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","/home/chetas/projects/se_project/eduapp/src/components/Navigation/Navigation.js",["105"],"/home/chetas/projects/se_project/eduapp/src/components/HomePage/Home.js",["106"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Col, Container, Row } from 'reactstrap';\nimport { fetch_home } from '../../redux/Session/sessionAction';\nimport ReqSession from '../Sessions/ReqSession';\nimport SessionCompleted from '../Sessions/SessionCompleted';\nimport Recommendations from './Recommendations';\nimport './Styles.css'\n\nclass Home extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            show_upcom: true,\n            show_pend: false,\n            show_past: false,\n        }\n    }\n\n    showupcoming = () => {\n        this.setState({\n            show_upcom: true,\n            show_pend: false,\n            show_past: false\n        })\n    }\n\n    showpending = () => {\n        this.setState({\n            show_upcom: false,\n            show_pend: true,\n            show_past: false\n        })\n    }\n\n    showpast = () => {\n        this.setState({\n            show_upcom: false,\n            show_pend: false,\n            show_past: true\n        })\n    }\n\n    refresh = () => {\n        this.props.fetchHome(this.props.user_id, this.props.is_teacher)\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if(prevProps.user_id != this.props.user_id) {\n            if(this.props.LoggedIn) {\n                this.props.fetchHome(this.props.user_id , this.props.is_teacher)\n            }\n        }\n    }\n\n    render() {\n        \n        const upcoming = this.props.upcoming_sessions.map((up) => (\n            <React.Fragment key={up.session_id}>\n                <Container style={{border: \"1px solid black\"}}>\n                    {   this.props.is_teacher &&\n                        <Row>\n                        <Col>\n                            Student: {up.first_name} {up.last_name}\n                        </Col>\n                        <Col>\n                            Grade: {up.grade}\n                        </Col>\n                        <Col>\n                            Board: {up.board}\n                        </Col>\n                    </Row>}\n                    {   !this.props.is_teacher &&\n                        <Row>\n                        <Col>\n                            Teacher: {up.first_name} {up.last_name}\n                        </Col>\n                        <Col>\n                            Qualification: {up.grade}\n                        </Col>\n                    </Row>}\n                    <Row>\n                        <Col>\n                            Subject: {this.props.all_subjects[up.subject_id - 1].subject_name}\n                            {/* Subject: {this.props.all_subjects.find(sub => sub.id = up.subject_id).subject_name} */}\n                        </Col>\n                        <Col sm = {3}>\n                            Language: {this.props.all_languages[up.language_id - 1].language_name}\n                            {/* Language: {this.props.all_languages.find(lang => lang.id = up.language_id).language_name} */}\n                        </Col>\n                        <Col>\n                            Topic: {up.topic}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            Time Slot: {up.time_slot}\n                        </Col>\n                        <Col>\n                            Date: {up.req_date}\n                        </Col>\n                    </Row>\n                    {\n                        !this.props.is_teacher &&\n                        <SessionCompleted session_id={up.session_id} teacher_id={up.teacher_id} refresh= {this.refresh}/>\n                    }\n                </Container>\n            </React.Fragment>\n        ))\n\n        const pending = this.props.pending_requests.map((req) => (\n            <React.Fragment key={req.request_id}>\n                <Container style={{border: \"1px solid black\"}}>\n                    <Row>\n                        <Col>\n                            {/* Subject: {req.subject_id} */}\n                            Subject: {this.props.all_subjects[req.subject_id - 1].subject_name}\n                        </Col>\n                        <Col>\n                            Topic: {req.topic}\n                        </Col>\n                        <Col>\n                            Language: {this.props.all_languages[req.language_id - 1].language_name}\n                            {/* Language: {req.subject_id} */}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            TimeSlot: {req.time_slot}\n                        </Col>\n                        <Col>\n                        Date: {req.req_date}\n                        </Col>\n                    </Row>\n                </Container>\n            </React.Fragment>\n        ))\n\n        const past = this.props.past_sessions.map((up) => (\n            <React.Fragment key={up.session_id}>\n                <Container style={{border: \"1px solid black\"}}>\n                    {   this.props.is_teacher &&\n                        <Row>\n                        <Col>\n                            Student: {up.first_name} {up.last_name}\n                        </Col>\n                        <Col>\n                            Grade: {up.grade}\n                        </Col>\n                        <Col>\n                            Board: {up.board}\n                        </Col>\n                    </Row>}\n                    {   !this.props.is_teacher &&\n                        <Row>\n                        <Col>\n                            Teacher: {up.first_name} {up.last_name}\n                        </Col>\n                        <Col>\n                            Qualification: {up.grade}\n                        </Col>\n                    </Row>}\n                    <Row>\n                        <Col>\n                            Subject: {this.props.all_subjects[up.subject_id - 1].subject_name}\n                            {/* Subject: {this.props.all_subjects.find(sub => sub.id = up.subject_id).subject_name} */}\n                        </Col>\n                        <Col sm = {3}>\n                            Language: {this.props.all_languages[up.language_id - 1].language_name}\n                            {/* Language: {this.props.all_languages.find(lang => lang.id = up.language_id).language_name} */}\n                        </Col>\n                        <Col>\n                            Topic: {up.topic}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            Time Slot: {up.time_slot}\n                        </Col>\n                        <Col>\n                            Date: {up.req_date}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <h3>Ratings for this session: {up.review}/5</h3>\n                    </Row>\n                </Container>\n            </React.Fragment>\n        ))\n\n        return(\n            <div className=\"toplookout\">\n                <Container>\n                    <Col style={{textAlign: \"left\"}}>\n                        <h2 className=\"dashboard\">Dashboard</h2>\n                        {this.props.LoggedIn && !this.props.is_teacher &&\n                            <ReqSession/>\n                        }\n                    </Col>\n                    {\n                        this.props.LoggedIn &&\n                    <Col style={{textAlign: \"right\"}}>\n                        <Button color=\"danger\" onClick={this.refresh}>Refresh Tab</Button>\n                    </Col>\n                    }\n                </Container>\n                <br></br>\n                {\n                    this.props.LoggedIn &&\n                    <Container style={{border: \"1px solid #cecece\", height: \"500px\", overflow: \"auto\"}}>\n                        <Row>\n                            <Col>\n                                <Button color=\"none\" onClick={this.showupcoming}>Upcoming Sessions</Button>\n                            </Col>\n                            {\n                                !this.props.is_teacher &&\n                                <Col>\n                                    <Button color=\"none\" onClick={this.showpending}>Pending Requests</Button>\n                                </Col>\n                            }\n                            <Col>\n                                <Button color=\"none\" onClick={this.showpast}>Past Sessions</Button>\n                            </Col>\n                        </Row>\n                        <Row>\n                            {   this.state.show_upcom &&\n                                (this.props.upcoming_sessions.length === 0 ?\n                                <Container style={{textAlign: \"center\"}}>No upcoming Sessions</Container> : <Container>{upcoming}</Container>)\n                            }\n                            {   this.state.show_pend &&\n                                (this.props.pending_requests.length === 0 ?\n                                <Container style={{textAlign: \"center\"}}>No Pending Requests</Container> : <Container>{pending}</Container>)\n                            }\n                            {   this.state.show_past &&\n                                (this.props.past_sessions.length === 0 ?\n                                <Container style={{textAlign: \"center\"}}>No Past Sessions</Container> : <Container>{past}</Container>)\n                            }\n                        </Row>\n                    </Container>\n                }\n                {\n                    this.props.LoggedIn && !this.props.is_teacher &&\n                    <Recommendations/>\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        LoggedIn: state.users.loggedIn,\n        is_teacher: state.users.is_teacher,\n        upcoming_sessions: state.session.upcoming_sessions,\n        pending_requests: state.session.pending_requests,\n        past_sessions: state.session.past_sessions,\n        user_id: state.users.user_id,\n        all_subjects: state.users.all_subjects,\n        all_languages: state.users.all_languages \n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchHome : (id, is_teacher) => dispatch(fetch_home(id, is_teacher))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)","/home/chetas/projects/se_project/eduapp/src/components/Users/Login.js",[],"/home/chetas/projects/se_project/eduapp/src/components/Users/Logout.js",[],"/home/chetas/projects/se_project/eduapp/src/components/Users/Profile.js",["107","108","109","110","111"],"/home/chetas/projects/se_project/eduapp/src/components/Users/Register.js",["112","113"],"/home/chetas/projects/se_project/eduapp/src/redux/Users/userActions.js",["114"],"import { ADD_LANGUAGE, ADD_SUBJECT, DELETE_LANGUAGE, DELETE_SUBJECT, ERROR, GET_LANGUAGE, GET_STUDENT, GET_SUBJECT, GET_TEACHER, SET_ALL_LANG, SET_ALL_SUB ,LOGIN, LOGOUT, SET_LOGIN } from \"./userTypes\"\nimport axios from 'axios'\n\nexport const checkUser = (dispatch) => {\n    return (dispatch) => {\n        axios.get(\"http://localhost:5000/users/login\")\n        .then((response) => {\n            if(response.data.loggedIn === true) {\n                dispatch(login(response.data.user[0]))\n                //console.log(response.data.user[0].user_type)\n                \n                if(response.data.user[0].user_type == 0) {\n                    axios.get(\"http://localhost:5000/users/student\", {\n                        params: {\n                            id: response.data.user[0].user_id\n                        }\n                    })\n                    .then((resp) => {\n                        dispatch(getstudent(resp.data[0]))\n                    })\n                    .catch((err)=> {\n                        console.log(err)\n                    })\n                    axios.get(\"http://localhost:5000/users/student_subjects\", {\n                        params: {\n                            id:response.data.user[0].user_id\n                        }\n                    })\n                    .then((resp) => {\n                        dispatch(getsubject(resp.data))\n                        //console.log(resp.data)\n                    })\n                    .catch((err)=> {\n                        console.log(err)\n                    })\n                }\n                else {\n                    axios.get(\"http://localhost:5000/users/teacher\", {\n                        params: {\n                            id: response.data.user[0].user_id\n                        }\n                    })\n                    .then((resp) => {\n                        dispatch(getteacher(resp.data[0]))\n                    })\n                    .catch((err)=> {\n                        console.log(err)\n                    })\n                    axios.get(\"http://localhost:5000/users/teacher_subjects\", {\n                        params: {\n                            id:response.data.user[0].user_id\n                        }\n                    })\n                    .then((resp) => {\n                        dispatch(getsubject(resp.data))\n                    })\n                    .catch((err)=> {\n                        console.log(err)\n                    })\n                    axios.get(\"http://localhost:5000/users/languages\", {\n                        params: {\n                            id:response.data.user[0].user_id\n                        }\n                    })\n                    .then((resp) => {\n                        dispatch(getlanguage(resp.data))\n                    })\n                    .catch((err)=> {\n                        console.log(err)\n                    })\n                }\n            }\n            else {\n                dispatch(logout)\n            }\n        })\n        .catch(error => {\n            dispatch(err(error))\n        })\n        axios.get(\"http://localhost:5000/users/all_subjects\")\n        .then((response) => {\n            // set_subs(response.data)\n            dispatch(set_all_subs(response.data))\n        })\n        .catch((err) => {\n            console.log(err.message)\n        })\n        axios.get(\"http://localhost:5000/users/all_languages\")\n        .then((response) => {\n            dispatch(set_all_langs(response.data))\n        })\n        .catch((err) => {\n            console.log(err.message)\n        })\n    }\n}\n\nexport const getSubject = (user_id, user_type, sub, dispatch) => {\n    return (dispatch) => {\n        var body = {\n            user_id: user_id,\n            subject_id: sub.id\n        }\n        \n        if(user_type) {\n            axios.post(\"http://localhost:5000/users/add_teacher_subject\", body)\n            .then(res => {\n                console.log(res)\n                dispatch(addSubject({subject_id: sub.id, subject_name: sub.sub}))\n            })\n            .catch((err)=> {\n                console.log(err.message)\n            })\n        }\n        else {\n            axios.post(\"http://localhost:5000/users/add_student_subject\", body)\n            .then(res => {\n                console.log(res)\n                dispatch(addSubject({subject_id: sub.id, subject_name: sub.sub}))\n            })\n            .catch((err)=> {\n                console.log(err)\n            })\n        }\n    }\n}\n\nexport const getLanguage = (user_id, lang, dispatch) => {\n    return (dispatch) => {\n        var body = {\n            user_id: user_id,\n            language_id: lang.id\n        }\n        axios.post(\"http://localhost:5000/users/add_language\", body)\n        .then(res => {\n            console.log(res)\n            dispatch(addLanguage({language_id: lang.id, language_name: lang.lang}))\n        })\n        .catch((err)=> {\n            console.log(err)\n        })\n    }\n}\n\n\nexport const removeSubject = (user_id, user_type, sub, dispatch) => {\n    return (dispatch) => {\n        var body = {\n            user_id: user_id,\n            subject_id: sub\n        }\n        \n        if(user_type) {\n            axios.post(\"http://localhost:5000/users/del_teacher_subject\", body)\n            .then(res => {\n                console.log(res)\n                dispatch(deleteSubject({subject_id: sub}))\n            })\n            .catch((err)=> {\n                console.log(err.message)\n            })\n        }\n        else {\n            axios.post(\"http://localhost:5000/users/del_student_subject\", body)\n            .then(res => {\n                console.log(res)\n                dispatch(deleteSubject({subject_id: sub}))\n            })\n            .catch((err)=> {\n                console.log(err)\n            })\n        }\n    }\n}\n\nexport const removeLanguage = (user_id, lang, dispatch) => {\n    return (dispatch) => {\n        var body = {\n            user_id: user_id,\n            language_id: lang\n        }\n        axios.post(\"http://localhost:5000/users/del_language\", body)\n        .then(res => {\n            console.log(res)\n            dispatch(deleteLanguage({language_id: lang}))\n        })\n        .catch((err)=> {\n            console.log(err)\n        })\n    }\n}\n\nexport const set_all_langs = (value) => {\n    return {\n        type: SET_ALL_LANG,\n        payload:value\n    }\n}\n\nexport const set_all_subs = (value) => {\n    return {\n        type: SET_ALL_SUB,\n        payload:value\n    }\n}\n\n\nexport const login = (value) => {\n    return {\n        type: LOGIN,\n        payload: value\n    }\n}\n\nexport const getstudent = (value) => {\n    return {\n        type: GET_STUDENT,\n        payload: value\n    }\n}\n\nexport const getteacher = (value) => {\n    return {\n        type: GET_TEACHER,\n        payload: value\n    }\n}\n\nexport const getsubject = (value) => {\n    return {\n        type: GET_SUBJECT,\n        payload: value\n    }\n}\n\nexport const getlanguage = (value) => {\n    return {\n        type: GET_LANGUAGE,\n        payload: value\n    }\n}\n\nexport const logout = () => {\n    return {\n        type: LOGOUT,\n    }\n}\n\nexport const err = (error) => {\n    return {\n        type: ERROR,\n        payload: error.message\n    }\n}\n\nexport const setLogin = () => {\n    return {\n        type: SET_LOGIN\n    }\n}\n\nexport const addSubject = (value) => {\n    return {\n        type: ADD_SUBJECT,\n        payload: value\n    }\n}\n\nexport const addLanguage = (value) => {\n    return {\n        type: ADD_LANGUAGE,\n        payload: value\n    }\n}\n\nexport const deleteSubject = (value) => {\n    return {\n        type: DELETE_SUBJECT,\n        payload: value\n    }\n}\n\nexport const deleteLanguage = (value) => {\n    return {\n        type: DELETE_LANGUAGE,\n        payload: value\n    }\n}","/home/chetas/projects/se_project/eduapp/src/redux/Users/userTypes.js",[],"/home/chetas/projects/se_project/eduapp/src/redux/store.js",[],"/home/chetas/projects/se_project/eduapp/src/redux/Users/userReducer.js",[],"/home/chetas/projects/se_project/eduapp/src/components/Sessions/Request_view.js",[],"/home/chetas/projects/se_project/eduapp/src/components/Sessions/ReqSession.js",["115","116","117","118"],"import axios from 'axios';\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input, Row, Col } from 'reactstrap';\nimport { send_request } from '../../redux/Session/sessionAction';\n\nclass ReqSession extends Component {\n    constructor() {\n        super() \n        this.state = {\n            modal: false,\n            subject_id: '',\n            topic: '',\n            time_slot: '',\n            date_slot: '',\n            lang: '',\n            subjects: [],\n            languages: []\n        }\n    }\n    toggle = () => {\n        this.setState({\n            modal: !this.state.modal\n        })\n    }\n\n    handle = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handle1 = e => {\n        this.setState({\n            [e.target.name]: e.target[e.target.selectedIndex].value\n        })\n    }\n\n    handleSubmit = e => {\n        e.preventDefault();\n        console.log(this.state)\n\n        var body = {\n            sender_id: this.props.user_id,\n            subject_id: this.state.subject_id,\n            topic: this.state.topic,\n            time_slot: this.state.time_slot,\n            req_date: this.state.date_slot,\n            language_id: this.state.language_id,\n            approved: 0,\n            mentor_specific: -1\n        }\n        this.props.send_request(body)\n\n        this.setState({\n            modal: false,\n            subject_id: '',\n            topic: '',\n            time_slot: '',\n            req_date: '',\n            language_id: '',\n            subjects: [],\n            languages: []\n        })\n    }\n    \n    componentDidUpdate(prevProps, prevState) {\n        if(prevState.modal != this.state.modal && this.state.modal) {\n            this.setState({\n                languages: this.props.all_languages,\n                subjects: this.props.all_subjects\n            })\n        }\n    }\n\n    render() {\n\n        var all_subjects = this.state.subjects.map((subject) => (\n            <option key={subject.subject_id} value={subject.subject_id} id={subject.subject_id}>{subject.subject_name}</option>\n        ))\n\n        var all_languages = this.state.languages.map((language) => (\n            <option key={language.language_id} value={language.language_id} id={language.language_id}>{language.language_name}</option>\n        ))\n\n        return(\n            <React.Fragment>\n\n                <div>\n                    <Button color=\"danger\" onClick={this.toggle}>Request a Session</Button>\n                </div>\n                <Modal isOpen={this.state.modal} toggle={this.toggle}>\n                    <ModalHeader>Session Request</ModalHeader>\n                    <ModalBody>\n                        <Form>\n                            <FormGroup row>\n                                <Label for=\"subject_id\" sm={2}>Subject</Label>\n                                <Col sm={10}>\n                                    <Input type=\"select\" name=\"subject_id\" id=\"subject\" onChange={this.handle1}>\n                                        <option value=\"\" disabled selected>Select the subject</option>\n                                        {\n                                            all_subjects\n                                        }\n                                    </Input>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label for=\"topic\" sm={2}>Topic</Label>\n                                <Col sm={10}>\n                                    <Input type=\"text\" name=\"topic\" id=\"topic\" placeholder=\"Enter the topic\" value={this.state.topic} onChange={this.handle}></Input>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label for=\"time_slot\" sm={2}>Time Slot</Label>\n                                <Col sm={10}>\n                                    <Input type=\"text\" name=\"time_slot\" id=\"time_slot\" value={this.state.time_slot} onChange={this.handle} placeholder=\"Format: hh:mm to hh:mm\"></Input>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label for=\"date_slot\" sm={2}>Date</Label>\n                                <Col sm={10}>\n                                    <Input type=\"date\" name=\"date_slot\" id=\"date_slot\" value={this.state.date_slot} onChange={this.handle}></Input>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label for=\"lang\" sm={2}>Language</Label>\n                                <Col sm={10}>\n                                    <Input type=\"select\" name=\"language_id\" id=\"lang\" onChange={this.handle1}>\n                                        <option value=\"\" disabled selected>Select the language</option>\n                                        {\n                                            all_languages\n                                        }\n                                    </Input>\n                                </Col>\n                            </FormGroup>\n                            <Button color=\"success\" onClick={this.handleSubmit}>Request</Button>\n                            <Button color=\"danger\" onClick={this.toggle}>Back</Button>\n                        </Form>\n                    </ModalBody>\n\n\n\n                </Modal>\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        user_id: state.users.user_id,\n        all_subjects: state.users.all_subjects,\n        all_languages: state.users.all_languages, \n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        send_request: (body) => dispatch(send_request(body))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ReqSession);","/home/chetas/projects/se_project/eduapp/src/redux/Session/sessionReducer.js",[],"/home/chetas/projects/se_project/eduapp/src/redux/Session/sessionTypes.js",[],"/home/chetas/projects/se_project/eduapp/src/redux/Session/sessionAction.js",[],"/home/chetas/projects/se_project/eduapp/src/components/Sessions/SessionCompleted.js",[],"/home/chetas/projects/se_project/eduapp/src/components/HomePage/Recommendations.js",["119","120"],"import axios from 'axios'\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Button, Col, Container, Row } from 'reactstrap'\nimport ReqIndiSession from '../Sessions/ReqIndiSession'\n\nclass Recommendations extends Component {\n    constructor() {\n        super()\n        this.state = {\n            recomms : []\n        }\n    }\n\n    componentDidMount() {\n        // if(this.props.loggedIn)\n        axios.get(\"http://localhost:5000/users/recommendations\", {\n            params : {\n                student_id: this.props.user_id\n            }\n        })\n        .then(response => {\n            this.setState({\n                recomms: response.data\n            })\n        })\n        .catch(err => {\n            console.log(err.message)\n        })\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if(prevProps.user_id != this.props.user_id) {\n            axios.get(\"http://localhost:5000/users/recommendations\", {\n            params : {\n                student_id: this.props.user_id\n            }\n        })\n        .then(response => {\n            this.setState({\n                recomms: response.data\n            })\n        })\n        .catch(err => {\n            console.log(err.message)\n        })\n        }\n    }\n\n    render() {\n\n        const recommens = this.state.recomms.map(rec => (\n            <React.Fragment key={rec.user_id}>\n                <Container style={{border: \"1px solid #cece\"}}>\n                    <Row>\n                        <Col>\n                            Teacher: {rec.first_name} {rec.last_name}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            Qualification: {rec.qualification}\n                        </Col>\n                        <Col>\n                            Rating_points: {rec.rating_points}\n                        </Col>\n                        <Col>\n                            Sessions Count: {rec.sessions_taken}\n                        </Col>\n                    </Row>\n                    {/* <Button color=\"success\" onClick={}>Request session from {rec.first_name}</Button> */}\n                    <ReqIndiSession {...rec}/>\n                </Container>\n            </React.Fragment>\n        ))\n\n        return(\n            <Container>\n                    <Row>\n                        <Col style={{textAlign: \"left\", marginTop: \"30px\"}}>\n                            <h2 className=\"dashboard\">Recommendations</h2>\n                        </Col>\n                    </Row>\n                    {\n                        this.state.recomms.length === 0 ? <h3>Add favorite subjects in profile to see recommendations</h3>\n                        :\n                        <Row>\n                            {\n                                recommens\n                            }\n                        </Row>\n                    }\n            </Container>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        user_id: state.users.user_id,\n        loggedin: state.users.loggedIn      \n    }\n}\n\nexport default connect(mapStateToProps)(Recommendations) ","/home/chetas/projects/se_project/eduapp/src/components/Sessions/ReqIndiSession.js",["121","122","123"],"import axios from 'axios';\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input, Row, Col } from 'reactstrap';\nimport { send_request } from '../../redux/Session/sessionAction';\n\nclass ReqIndiSession extends Component {\n    constructor(props) {\n        super(props) \n        this.state = {\n            modal: false,\n            subject_id: '',\n            topic: '',\n            time_slot: '',\n            date_slot: '',\n            lang: '',\n            subjects: [],\n            languages: []\n        }\n    }\n    toggle = () => {\n        this.setState({\n            modal: !this.state.modal\n        })\n    }\n\n    handle = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handle1 = e => {\n        this.setState({\n            [e.target.name]: e.target[e.target.selectedIndex].value\n        })\n    }\n\n    handleSubmit = e => {\n        e.preventDefault();\n        console.log(this.state)\n\n        var body = {\n            sender_id: this.props.user_id,\n            subject_id: this.state.subject_id,\n            topic: this.state.topic,\n            time_slot: this.state.time_slot,\n            req_date: this.state.date_slot,\n            language_id: this.state.language_id,\n            approved: 0,\n            mentor_specific: this.props.t_id\n        }\n        this.props.send_request(body)\n\n        this.setState({\n            modal: false,\n            subject_id: '',\n            topic: '',\n            time_slot: '',\n            req_date: '',\n            language_id: '',\n            subjects: [],\n            languages: []\n        })\n    }\n    \n    componentDidUpdate(prevProps, prevState) {\n        if(prevState.modal != this.state.modal && this.state.modal) {\n            axios.get(\"http://localhost:5000/users/languages\", {\n                params: {\n                    id: this.props.t_id\n                }\n            })\n            .then(response => {\n                this.setState({\n                    languages: response.data\n                })\n                axios.get(\"http://localhost:5000/users/teacher_subjects\", {\n                    params: {\n                        id: this.props.t_id\n                    }\n                })\n                .then(response => {\n                    this.setState({\n                        subjects: response.data\n                    })\n                })\n                .catch(err => {\n                    console.log(err)\n                })\n\n            })\n            .catch(err => {\n                console.log(err)\n            })\n            \n        }\n    }\n\n    render() {\n        \n\n        var all_subjects = this.state.subjects.map((subject) => (\n            <option key={subject.subject_id} value={subject.subject_id} id={subject.subject_id}>{subject.subject_name}</option>\n        ))\n\n        var all_languages = this.state.languages.map((language) => (\n            <option key={language.language_id} value={language.language_id} id={language.language_id}>{language.language_name}</option>\n        ))\n\n        return(\n            <React.Fragment>\n\n                <div>\n                    <Button color=\"success\" onClick={this.toggle}>Request session from {this.props.first_name} {this.props.last_name}</Button>\n                </div>\n                <Modal isOpen={this.state.modal} toggle={this.toggle}>\n                    <ModalHeader>Session Request</ModalHeader>\n                    <ModalBody>\n                        <Form>\n                            <FormGroup row>\n                                <Label for=\"subject_id\" sm={2}>Subject</Label>\n                                <Col sm={10}>\n                                    <Input type=\"select\" name=\"subject_id\" id=\"subject\" onChange={this.handle1}>\n                                        <option value=\"\" disabled selected>Select the subject</option>\n                                        {\n                                            all_subjects\n                                        }\n                                    </Input>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label for=\"topic\" sm={2}>Topic</Label>\n                                <Col sm={10}>\n                                    <Input type=\"text\" name=\"topic\" id=\"topic\" placeholder=\"Enter the topic\" value={this.state.topic} onChange={this.handle}></Input>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label for=\"time_slot\" sm={2}>Time Slot</Label>\n                                <Col sm={10}>\n                                    <Input type=\"text\" name=\"time_slot\" id=\"time_slot\" value={this.state.time_slot} onChange={this.handle} placeholder=\"Format: hh:mm to hh:mm\"></Input>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label for=\"date_slot\" sm={2}>Date</Label>\n                                <Col sm={10}>\n                                    <Input type=\"date\" name=\"date_slot\" id=\"date_slot\" value={this.state.date_slot} onChange={this.handle}></Input>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label for=\"lang\" sm={2}>Language</Label>\n                                <Col sm={10}>\n                                    <Input type=\"select\" name=\"language_id\" id=\"lang\" onChange={this.handle1}>\n                                        <option value=\"\" disabled selected>Select the language</option>\n                                        {\n                                            all_languages\n                                        }\n                                    </Input>\n                                </Col>\n                            </FormGroup>\n                            <Button color=\"success\" onClick={this.handleSubmit}>Request</Button>\n                            <Button color=\"danger\" onClick={this.toggle}>Back</Button>\n                        </Form>\n                    </ModalBody>\n\n\n\n                </Modal>\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        user_id: state.users.user_id,\n        all_subjects: state.users.all_subjects,\n        all_languages: state.users.all_languages, \n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        send_request: (body) => dispatch(send_request(body))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ReqIndiSession);\n",{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":8,"column":21,"nodeType":"130","messageId":"131","endLine":8,"endColumn":32},{"ruleId":"128","severity":1,"message":"132","line":8,"column":34,"nodeType":"130","messageId":"131","endLine":8,"endColumn":55},{"ruleId":"128","severity":1,"message":"133","line":15,"column":10,"nodeType":"130","messageId":"131","endLine":15,"endColumn":18},{"ruleId":"128","severity":1,"message":"134","line":16,"column":10,"nodeType":"130","messageId":"131","endLine":16,"endColumn":18},{"ruleId":"128","severity":1,"message":"135","line":17,"column":10,"nodeType":"130","messageId":"131","endLine":17,"endColumn":18},{"ruleId":"128","severity":1,"message":"136","line":18,"column":10,"nodeType":"130","messageId":"131","endLine":18,"endColumn":19},{"ruleId":"128","severity":1,"message":"137","line":18,"column":21,"nodeType":"130","messageId":"131","endLine":18,"endColumn":30},{"ruleId":"128","severity":1,"message":"138","line":19,"column":10,"nodeType":"130","messageId":"131","endLine":19,"endColumn":18},{"ruleId":"128","severity":1,"message":"139","line":19,"column":20,"nodeType":"130","messageId":"131","endLine":19,"endColumn":28},{"ruleId":"140","severity":1,"message":"141","line":28,"column":6,"nodeType":"142","endLine":28,"endColumn":22,"suggestions":"143"},{"ruleId":"144","severity":1,"message":"145","line":90,"column":118,"nodeType":"146","endLine":90,"endColumn":133},{"ruleId":"147","severity":1,"message":"148","line":50,"column":30,"nodeType":"149","messageId":"150","endLine":50,"endColumn":32},{"ruleId":"128","severity":1,"message":"151","line":5,"column":34,"nodeType":"130","messageId":"131","endLine":5,"endColumn":45},{"ruleId":"128","severity":1,"message":"152","line":61,"column":13,"nodeType":"130","messageId":"131","endLine":61,"endColumn":17},{"ruleId":"147","severity":1,"message":"148","line":122,"column":48,"nodeType":"149","messageId":"150","endLine":122,"endColumn":50},{"ruleId":"128","severity":1,"message":"153","line":163,"column":73,"nodeType":"130","messageId":"131","endLine":163,"endColumn":83},{"ruleId":"154","severity":1,"message":"155","line":220,"column":29,"nodeType":"146","endLine":220,"endColumn":77},{"ruleId":"128","severity":1,"message":"156","line":5,"column":27,"nodeType":"130","messageId":"131","endLine":5,"endColumn":33},{"ruleId":"147","severity":1,"message":"148","line":100,"column":31,"nodeType":"149","messageId":"150","endLine":100,"endColumn":33},{"ruleId":"147","severity":1,"message":"157","line":12,"column":52,"nodeType":"149","messageId":"150","endLine":12,"endColumn":54},{"ruleId":"128","severity":1,"message":"158","line":1,"column":8,"nodeType":"130","messageId":"131","endLine":1,"endColumn":13},{"ruleId":"128","severity":1,"message":"159","line":4,"column":49,"nodeType":"130","messageId":"131","endLine":4,"endColumn":60},{"ruleId":"128","severity":1,"message":"160","line":4,"column":93,"nodeType":"130","messageId":"131","endLine":4,"endColumn":96},{"ruleId":"147","severity":1,"message":"148","line":68,"column":28,"nodeType":"149","messageId":"150","endLine":68,"endColumn":30},{"ruleId":"128","severity":1,"message":"161","line":4,"column":10,"nodeType":"130","messageId":"131","endLine":4,"endColumn":16},{"ruleId":"147","severity":1,"message":"148","line":33,"column":30,"nodeType":"149","messageId":"150","endLine":33,"endColumn":32},{"ruleId":"128","severity":1,"message":"159","line":4,"column":49,"nodeType":"130","messageId":"131","endLine":4,"endColumn":60},{"ruleId":"128","severity":1,"message":"160","line":4,"column":93,"nodeType":"130","messageId":"131","endLine":4,"endColumn":96},{"ruleId":"147","severity":1,"message":"148","line":68,"column":28,"nodeType":"149","messageId":"150","endLine":68,"endColumn":30},"no-native-reassign",["162"],"no-negated-in-lhs",["163"],"no-unused-vars","'getInterest' is defined but never used.","Identifier","unusedVar","'set_all_lang_and_subs' is defined but never used.","'LoggedIn' is assigned a value but never used.","'Username' is assigned a value but never used.","'Password' is assigned a value but never used.","'all_langs' is assigned a value but never used.","'set_langs' is assigned a value but never used.","'all_subs' is assigned a value but never used.","'set_subs' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["164"],"react/jsx-pascal-case","Imported JSX component Request_view must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'getlanguage' is defined but never used.","'body' is assigned a value but never used.","'image_link' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Router' is defined but never used.","Expected '===' and instead saw '=='.","'axios' is defined but never used.","'ModalFooter' is defined but never used.","'Row' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"165","fix":"166"},"Update the dependencies array to be: [props, props.loggedIn]",{"range":"167","text":"168"},[822,838],"[props, props.loggedIn]"]